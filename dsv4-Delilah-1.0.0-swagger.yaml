swagger: '2.0'
info:
  description: This is a restaurant website from the backend side.
  version: 1.0.0
  title: Delilah Resto
  contact:
    email: davidsv20@icloud.com
    url: https://github.com/DaveSV100/delilah-resto.git
tags:
- name: home
  description: Homepage
- name: users
  description: Users of Delilah Resto
- name: dishes
  description: Dishes from our restaurant
- name: orders
  description: Orders taken
paths:
  /users:
    get:
        tags:
        - users
        summary: List of users
        description: Returns all the users (only admins have access)
        produces:
        - application/json
        responses:
          200:
            description: successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/user'
          400:
            description: Bad request
          401: 
            description: Unauthorized
        security:
        - token:
          $ref: '#/securityDefinitions/token'
    put:
      tags:
      - users
      summary: Update an existing user
      description: If it's an admin it'll make use of the user object format but if it's a normal user it'll utilize the client_user format
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user data
        in: body
        description: User data
        required: true
        schema:
          $ref: '#/definitions/client_user'
          $ref: '#/definitions/user'
      responses:
        200: 
          description: successful operation
            schema: 
              type: array
                items:
                  $ref: '#/definitions/ok'
        400:
          description: Bad request. Missing arguments
        404:
          description: User not found
      security:
        - token:
          $ref: '#/securityDefinitions/token'
    delete:
      tags:
      - user
      summary: Delete user
      description: A normal user can delete only his own account. Admins can insert the email of an especific account to be deleted
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Email
        required: true
        schema:
          $ref: '#/definitions/user_email'
      responses:
        200
          description: User removed
        400:
          description: Invalid data
        404:
          description: User not found
  /users/{id}:
    get:
      tags:
      - users
      summary: Gets a user by id
      description: It returns the data of a user by the id provided in the parameters. Only for admis
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of user
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/user'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: User not found
  /users/login:
    post:
      tags:
      - users
      summary: Logs user into the system and provides a token with a payload indicating the data of user
      produces:
      - application/json
      parameters:
      - name: user data
        in: body
        description: User data
        required: true
        schema:
          $ref: '#/definitions/user_data'
      responses:
        200:
          description: successful operation. Token signed
          schema:
            type: string
            $ref: '#definitions/Token_res'
        400:
          description: Invalid input
        404: 
          description: User not found
  /users/signup:
    post:
      tags:
      - Users
      summary: Create a new account
      parameters:
      - name: New_data
        in: body
        description: New data to sign up
        required: true
        schema:
          $ref: '#/definitions/new_user'
      responses:
        200:
            description: successful operation
            schema:
              type: string
              $ref: '#definitions/ok'
        400:
          description: Incomplete form
  /dishes:
    get:
        tags:
        - Dishes
        summary: Show list of dishes
        description: All the users have access to the products list
        produces:
        - application/json
        responses:
          200:
            description: successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/dish'
          401: 
            description: Unathorized access, you need to sign in or sign up
          404:
            description: Invalid request
        security:
        - token:
          $ref: '#/securityDefinitions/token'
    post:
      tags:
      - Dishes
      summary: Create a new dish
      description: Only admins are allowed to create a new product
      parameters:
      - name: New_dish
        in: body
        description: New dish data
        required: true
        schema:
          $ref: '#/definitions/new_dish'
      responses:
        200:
            description: successful operation
            schema:
              type: string
              $ref: '#definitions/ok'
        400:
          description: Incomplete form
        401: 
          description: Unathorized. Only admins have access
      security:
        - token:
          $ref: '#/securityDefinitions/token'
    put:
      tags:
      - Dishes
      summary: Update an existing dish
      description: Admins can modify any dish
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: new_dish
        in: body
        description: New dish object. At least it must have the description field in order to get the product that will be modified
        required: true
        schema:
          $ref: '#/definitions/new_dish'
      responses:
        200: 
          description: successful operation
            schema: 
              type: array
                items:
                  $ref: '#/definitions/ok'
        400:
          description: Bad request. Missing arguments
        401: 
          description: Unathorized. Only admins have access
        404:
          description: Dish not found
      security:
        - token:
          $ref: '#/securityDefinitions/token'
    delete:
      tags:
      - Dishes
      summary: Delete dish
      description: Administrators can delete the dishes
      produces:
      - application/json
      parameters:
      - name: description
        in: body
        description: Name of the dish in the "description" field
        required: true
        schema:
          $ref: '#/definitions/Delete_dish'
      responses:
        200
          description: successful operation
            schema: 
              type: array
                items:
                  $ref: '#/definitions/ok'
        400:
          description: Invalid data
        401: 
          description: Unathorized. Only admins have access
        404:
          description: Dish not found
      security:
        - token:
          $ref: '#/securityDefinitions/token'
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
      - application/json
      - application/xml
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the pet
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the pet
        required: false
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - pet
      summary: Deletes a pet
      operationId: deletePet
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a pet
      operationId: placeOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the pet
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      operationId: getOrderById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1.0
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1.0
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
securityDefinitions:
  token:
    name: Bearer token
    type: Token
    in: header
    description: It must have the word "Bearer " (string) plus the token (string)
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Token_res: 
    type: object
    properties:
      message: 
        type: string
      token: 
        type: string
  OK: 
    type: object
    properties:
      message: 
        type: string
  New_user:
    type: object
    properties:
      id:
        type: int
        format: int64
      name:
        type: string
        format: varchar255
      email:
        type: string
        format: varchar255
      password:
        type: string
        format: varchar255
      direction:
        type: string
        format: varchar255
  User:
    type: object
    properties:
      id:
        type: int
        format: int64
      name:
        type: string
        format: varchar255
      email:
        type: string
        format: varchar255
      password:
        type: string
        format: varchar255
      direction:
        type: string
        format: varchar255
      admin:
        type: integer
        format: tinyint
        default: 0
        description: Shows the role of user. Admin = 1, customer = 0
  Welcome_user:
    type: object
    properties:
      Message:
        type: string
      token:
        type: string
  User_data:
    type: object
    properties:
      email:
        type: string
        format: varchar255
      password:
        type: string
        format: varchar255
  User_email: 
    type: object
    properties: 
      email: 
        type: string
        format: varchar255
  Dish:
    type: object
    properties:
      id:
        type: integer
        format: int64
      description:
        type: string
        format: varchar255
      image:
        type: string
        format: text
      price:
        type: number
        format: int64
  New_dish:
    type: object
    properties:
      description:
        type: string
        format: varchar255
      image:
        type: string
        format: text
      price:
        type: number
        format: int64
  Delete_dish: 
    type: object
    propereties:
      description: 
        type: string
        format: varchar255
  Pet:
    type: object
    required:
    - name
    - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /dsv4/Delilah/1.0.0
schemes:
 - https
 - http